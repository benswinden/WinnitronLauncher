using UnityEngine;
using System.IO;
using System.Collections;
using SimpleJSON;

[System.Serializable]
public class Game
{
	public DirectoryInfo directory;

	public string name;
	public string author;
	public Sprite screenshot;
    public string executable;

    public enum GameType { EXE, PICO8, CUSTOM, LEGACY, FLASH }
    public GameType gameType;

    public bool voidGame = false;

	/// <summary>
    /// The game only takes in a directory handed down by the Playlist class, it then finds all the relevant information for the Game
    /// </summary>
    /// <param name="directory">The directory path.</param>
    public Game(string directory)
	{
		this.directory = new DirectoryInfo(directory);

		//Check for the Winnitron Metadata JSON, and use oldschool folder naming if it doesn't exist
        string metadata = Path.Combine(this.directory.FullName, "winnitron_metadata.json");
		if (System.IO.File.Exists(metadata)) {
			BuildGameJSON();
		} else {
            BuildGame();
		}

        BuildHelperScripts();
	}

	/// <summary>
    /// Builds a game from scratch using only what it can find in the directory.
    /// </summary>
	private void BuildGame()
	{
        GM.dbug.Log("GAME: No JSON!  Determining game...");
        if (DetermineGameType())
        {
            this.name = GetGameNameFromFolderName();
            this.screenshot = GetScreenshot();
        }

        else
        {
            GM.dbug.Log("GAME: Could not determine game type.  Voiding game " + directory);
            voidGame = true;
        }
	}

    /// <summary>
    /// Builds a game using metadata information found in a JSON file generated by Winnitron Network or manually.
    /// </summary>
	private void BuildGameJSON()
	{
		var J = GM.data.LoadJson(Path.Combine(directory.FullName, "winnitron_metadata.json"));

		this.name = J["title"];
		this.author = null; //No author stuff just yet
		this.screenshot = GetScreenshot();
		this.executable = Path.Combine(directory.FullName, J["executable"]);

        switch(J["keys"]["template"])
        {
            case "default":
                gameType = GameType.EXE;
                break;

            case "pico8":
                gameType = GameType.PICO8;
                break;

            case "flash":
                gameType = GameType.FLASH;
                break;

            case "legacy":
                gameType = GameType.LEGACY;
                break;

            case "custom":
                gameType = GameType.CUSTOM;
                break;

            default:
                DetermineGameType();
                break;
        }

        GM.dbug.Log(null, "Game Built JSON! Name: " + name + " Screenshot: " + screenshot.name + " exe path: " + executable);
	}






    //Private Functions (there's a joke here somewhere)

    private Sprite GetScreenshot()
    {
        // Load the screenshot from the games directory as a Texture2D
        var screenshotTex = new Texture2D(1024, 768);

        if (Directory.GetFiles(this.directory.ToString(), "*.png").Length > 0)
        {
            GM.dbug.Log("GAME: Loading custom screenshot " + Directory.GetFiles(this.directory.ToString(), "*.png")[0]);
            screenshotTex.LoadImage(File.ReadAllBytes(Directory.GetFiles(directory.FullName + Path.DirectorySeparatorChar, "*.png")[0]));
        }
        else if (gameType == GameType.PICO8)
        {
            GM.dbug.Log("GAME: Loading default PICO8 screenshot ");
            screenshotTex = Resources.Load<Texture2D>("default_images/pico8") as Texture2D;
        }
        else
        {
            GM.dbug.Log("GAME: Loading default screenshot");
            screenshotTex = Resources.Load<Texture2D>("default_images/exe") as Texture2D;
        }

        // Turn the Texture2D into a sprite
        return Sprite.Create(screenshotTex, new Rect(0, 0, screenshotTex.width, screenshotTex.height), new Vector2(0.5f, 0.5f));
    }

	private string GetGameNameFromFolderName()
	{
		//Figure out the name of the game from the directory title
		var directoryName = directory.Name;

		//Replace the underscores and dashes with blank spaces
		var name = directoryName.Replace('_', ' ');
		name = name.Replace('-', ' ');

		return name;
	}

    /// <summary>
    /// Figures out what kind of game might be in the directory depending on the files inside.
    /// </summary>
    /// <returns>True if successful, false if unsuccessful in determining game type.</returns>
    private bool DetermineGameType()
    {
        if (Directory.GetFiles(this.directory.ToString(), "*.html").Length == 1)
        {
            executable = Directory.GetFiles(this.directory.ToString(), "*.html")[0];
            Debug.Log("Determined PICO8! " + executable);
            gameType = GameType.PICO8;
            return true;
        }
        else if (Directory.GetFiles(this.directory.ToString(), "*.exe").Length == 1)
        {
            Debug.Log("Determined EXE!");
            executable = Directory.GetFiles(this.directory.ToString(), "*.exe")[0];
            gameType = GameType.EXE;
            return true;
        }

        //Can't determine game type, voiding this game
        voidGame = true;
        return false;
    }

    /// <summary>
    /// This will make the launcher AHK scripts, and/or other scripts (.html files in pico8 case)
    /// and put them in the same folder as the game.
    /// </summary>
    public void BuildHelperScripts()
    {
        GM.dbug.Log("GAME: Create scripts for game " + name);

        string newAHKfile = "";

        switch (gameType)
        {
            case Game.GameType.EXE:

                newAHKfile = Resources.Load<TextAsset>("AHK_templates/ExeGameTemplate").text;

                newAHKfile = newAHKfile.Replace("{GAME_PATH}", executable);
                newAHKfile = newAHKfile.Replace("{GAME_NAME}", name);

                break;

            case Game.GameType.PICO8:

                string newJS = Resources.Load<TextAsset>("Pico8Launcher").text;
                newJS = newJS.Replace("{{{PATH_TO_HTML}}}", executable.Replace("\\", "\\\\"));
                WriteStringToFile(newJS, "Pico8Launcher.js");

                newAHKfile = Resources.Load<TextAsset>("AHK_templates/Pico8GameTemplate").text;
                newAHKfile = newAHKfile.Replace("{GAME_PATH}", GM.options.dataPath + "/Options/Pico8/nw.exe");

                break;

            case Game.GameType.LEGACY:

                newAHKfile = Resources.Load<TextAsset>("AHK_templates/LegacyGameTemplate").text;

                newAHKfile = newAHKfile.Replace("{GAME_PATH}", executable);
                newAHKfile = newAHKfile.Replace("{GAME_NAME}", name);

                break;

            case Game.GameType.FLASH:

                newAHKfile = Resources.Load<TextAsset>("AHK_templates/FlashGameTemplate").text;

                newAHKfile = newAHKfile.Replace("{GAME_PATH}", executable);
                newAHKfile = newAHKfile.Replace("{GAME_NAME}", name);

                break;

            case Game.GameType.CUSTOM:
                break;
        }

        //Things needed for every Launcher Script

        //Replace variables
        newAHKfile = newAHKfile.Replace("{DEBUG_OUTPUT}", "true"); // TODO make this configurable
        newAHKfile = newAHKfile.Replace("{IDLE_TIME}", "" + GM.options.runnerSecondsIdle);
        newAHKfile = newAHKfile.Replace("{IDLE_INITIAL}", "" + GM.options.runnerSecondsIdleInitial);
        newAHKfile = newAHKfile.Replace("{ESC_HOLD}", "" + GM.options.runnerSecondsESCHeld);

        //Delete old file and write to new one
        WriteStringToFile(newAHKfile, "RunGame.ahk");
    }

    /// <summary>
    /// Called by RUNNER script, in case the game needs to do some extra setup before it runs.
    /// </summary>
    public void PreRun()
    {
        if (gameType == GameType.PICO8)
        {
            string source = Path.Combine(directory.ToString(), "Pico8Launcher.js");
            string dest   = Path.Combine(GM.options.dataPath, "Options/Pico8/Pico8Launcher.js");

            GM.dbug.Log("GAME: PreRun copying " + source + " to " + dest);
            File.Copy(source, dest, true);
        }
    }

    /// <summary>
    /// Writes the text to the filename in the Game directory.
    /// </summary>
    /// <param name="text">The text to encode into the file.</param>
    /// <param name="fileName">The name of the file.</param>
    private void WriteStringToFile(string text, string fileName)
    {
        string file = Path.Combine(directory.FullName, fileName);

        //Delete old file and write to new one
        File.Delete(file);
        System.IO.File.WriteAllText(file, text);
        GM.dbug.Log("GAME: Writing file " + file);
    }
}
